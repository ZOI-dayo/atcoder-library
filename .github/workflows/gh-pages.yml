name: Format & Deploy

on:
  push:
    branches: ["main"]

  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Lint
        uses: deep5050/cppcheck-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN}}
          std: c++17
      - name: Commit files
        run: |
          git add .
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -a -m "Lint report" || echo "No changes to commit"
          git pull --rebase
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
  format:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Format
        uses: DoozyX/clang-format-lint-action@v0.16.2
        with:
          source: '.'
          extensions: 'hpp,cpp'
          clangFormatVersion: 16
          inplace: True
          style: LLVM
      - name: Commit files
        run: |
          git add .
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -a -m "Format files" || echo "No changes to commit"
          git pull --rebase
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
  print:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install NeoVim
        run: |
          cd /tmp
          curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
          chmod u+x nvim.appimage
          ./nvim.appimage --appimage-extract
          ./squashfs-root/AppRun --version
          sudo mv squashfs-root /
          sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
      - name: Install Nightfox
        run: |
          mkdir -p ~/.config/nvim/
          cd ~/.config/nvim/
          git clone https://github.com/EdenEast/nightfox.nvim.git
      - name: Install Cica font
        run: |
          cd /tmp
          curl -L -O https://github.com/miiton/Cica/releases/download/v5.0.3/Cica_v5.0.3.zip
          unzip Cica_v5.0.3.zip
          sudo mkdir /usr/share/fonts/truetype/cica
          sudo cp *.ttf /usr/share/fonts/truetype/cica/
          sudo fc-cache -vf
          fc-list | grep -i cica
          echo '<?xml version="1.0"?><!DOCTYPE fontconfig SYSTEM "fonts.dtd"><fontconfig><match target="pattern"><test name="family" qual="any"><string>monospace</string></test><edit binding="strong" mode="prepend" name="family"><string>Cica</string></edit></match></fontconfig>' | sudo tee /etc/fonts/local.conf
      - name: Install wkhtmltopdf
        run: |
          cd /tmp
          sudo apt install libfontenc1 xfonts-75dpi xfonts-base xfonts-encodings xfonts-utils openssl build-essential libssl-dev libxrender-dev git-core libx11-dev libxext-dev libfontconfig1-dev libfreetype6-dev fontconfig -y
          wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.focal_amd64.deb
          sudo dpkg -i wkhtmltox_0.12.5-1.focal_amd64.deb
          sudo apt --fix-broken install
      - name: Generate PDF
        run: ./build-pdf.sh
      - uses: actions/upload-artifact@v3
        with:
          name: pdf
          path: pdf/
      # - name: Commit files
      #   run: |
      #     git add .
      #     git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "github-actions[bot]"
      #     git commit -a -m "Generate PDF" || echo "No changes to commit"
      #     git pull --rebase
      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ github.ref }}
  build:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install pip
        run: python -m pip install --upgrade pip
      - name: Install oj-verify-helper
        run: pip3 install online-judge-verify-helper
      # - name: Install GMP
        # run: |
          # sudo apt install g++ m4 zlib1g-dev make p7zip
          # wget https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.xz
          # tar -xvf gmp-6.2.1.tar.xz
          # cd gmp-6.2.1
          # ./configure --enable-cxx
          # make
          # make check
          # sudo make install
          # cd ../
      - name: Create cache dir
        run: mkdir -p .verify-helper/cache/_/test
      - name: Restore testcases
        uses: actions/cache/restore@v3
        with:
          path: .verify-helper/cache/**/test
          key: testcases-cache
          restore-keys: testcases-cache
      - name: Verify code
        run: oj-verify run
        env:
          YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
      - name: Cache testcases
        uses: actions/cache/save@v3
        with:
          path: .verify-helper/cache/**/test
          key: testcases-cache
          restore-keys: testcases-cache
      - name: Build docs
        run: oj-verify docs
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: .verify-helper/markdown
      - name: Build HTML
        working-directory: .verify-helper/markdown
        run: |
          bundle install
          bundle exec jekyll build -I -d ../../_site --baseurl /${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}/
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
