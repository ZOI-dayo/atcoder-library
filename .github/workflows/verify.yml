name: Verify Code

on: pull_request

jobs:
  set-lint-matrix:
    runs-on: ubuntu-latest
    outputs:
      lint-matrix: ${{ steps.set-lint-matrix.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: make values
        id: set-lint-matrix
        run: |
          list=$(find . -type f -name *.hpp -print0 | jq -R 'split("\u0000") | .[] | select(length > 0)' | jq -sc ".")
          echo "value=${list}" >> $GITHUB_OUTPUT
  lint:
    runs-on: ubuntu-latest
    needs: [set-lint-matrix]
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJson(needs.set-lint-matrix.outputs.lint-matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: install
        run: |
          sudo apt install clang-format
      - name: lint
        run: |
          clang-format --dry-run -style=file --Werror ${{ matrix.target }}
  set-run-matrix:
    runs-on: ubuntu-latest
    needs: [lint]
    outputs:
      run-matrix: ${{ steps.set-run-matrix.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: make values
        id: set-run-matrix
        run: |
          list=$(find test/ -type f -name *.test.cpp -print0 | jq -R 'split("\u0000") | .[] | select(length > 0)' | jq -sc ".")
          echo "value=${list}" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: [set-run-matrix]
    timeout-minutes: 7
    strategy:
      fail-fast: false
      matrix:
        testcase: ${{fromJson(needs.set-run-matrix.outputs.run-matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install pip
        run: python -m pip install --upgrade pip
      - name: Install oj-verify-helper
        run: pip3 install online-judge-verify-helper
      - name: Install boost
        run: sudo apt install libboost-all-dev
      - name: Create cache dir
        run: mkdir -p .verify-helper/cache/_/test
      - name: Restore testcases
        uses: actions/cache/restore@v3
        with:
          path: .verify-helper/cache/**/test
          key: testcases-cache-${{ matrix.testcase }}
          restore-keys: testcases-cache-${{ matrix.testcase }}
      - name: Verify code
        timeout-minutes: 5
        run: oj-verify run ${{ matrix.testcase }}
        env:
          YUKICODER_TOKEN: ${{ secrets.YUKICODER_TOKEN }}
      - name: Check timestamp
        run: ls -al ./.verify-helper/; cat ./.verify-helper/timestamps.remote.json
      - name: Create timestamp file
        run: cat ./.verify-helper/timestamps.remote.json | jq '.["${{ matrix.testcase }}"]' > ./timestamp.txt
      - name: Make base64-url name
        id: make-base64
        run: BASE64=`echo "${{ matrix.testcase }}" | basenc --base64url`; echo "base64=$BASE64" >> $GITHUB_OUTPUT
      - name: Upload timestamp
        uses: actions/upload-artifact@v3
        with:
          name: timestamp-${{ steps.make-base64.outputs.base64 }}
          path: ./timestamp.txt
      - name: Cache testcases
        uses: actions/cache/save@v3
        with:
          path: .verify-helper/cache/**/test
          key: testcases-cache-${{ matrix.testcase }}
          restore-keys: testcases-cache-${{ matrix.testcase }}
  verify_check:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - run: echo "All tests passed!!"
