test/aoj/ALDS1_14_B__rolling_hash.test.cpp:11:10: style: Variable 'h' is assigned a value that is never used. [unreadVariable]
  auto h = RollingHash("abc");
         ^
test/aoj/ALDS1_14_B__rolling_hash.test.cpp:12:11: style: Variable 'h2' is assigned a value that is never used. [unreadVariable]
  auto h2 = RollingHash("b");
          ^
math/modint.hpp:56:25: style:inconclusive: Technically the member function 'dynamic_modint::operator--' can be const. [functionConst]
  inline dynamic_modint operator--(int32_t) {
                        ^
math/modint.hpp:73:15: style:inconclusive: Technically the member function 'dynamic_modint::operator==' can be const. [functionConst]
  inline bool operator==(const dynamic_modint &a) { return _val == a._val; }
              ^
math/modint.hpp:74:15: style:inconclusive: Technically the member function 'dynamic_modint::operator!=' can be const. [functionConst]
  inline bool operator!=(const dynamic_modint &a) { return _val != a._val; }
              ^
math/modint.hpp:151:27: style:inconclusive: Technically the member function 'modint < 1000000007 >::operator++' can be const. [functionConst]
  constexpr inline modint operator++(int32_t) noexcept {
                          ^
math/modint.hpp:156:27: style:inconclusive: Technically the member function 'modint < 1000000007 >::operator--' can be const. [functionConst]
  constexpr inline modint operator--(int32_t) noexcept {
                          ^
math/modint.hpp:33:3: style: Struct 'dynamic_modint' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  dynamic_modint(int val) : _val(modint_utils::normalize(val, MOD)) {}
  ^
math/modint.hpp:132:20: style: Struct 'modint < 1000000007 >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  constexpr inline modint(int val) noexcept
                   ^
datastructure/segment-tree.hpp:12:5: style:inconclusive: Member variable 'SegmentTree < Monoids :: MinMonoid < int32_t > >::_monoid' is in the wrong place in the initializer list. [initializerList]
  M _monoid;
    ^
datastructure/segment-tree.hpp:21:40: note: Member variable 'SegmentTree < Monoids :: MinMonoid < int32_t > >::_monoid' is in the wrong place in the initializer list.
  explicit SegmentTree(int n) : _n(1), _monoid(M()), e(_monoid.e()) {
                                       ^
datastructure/segment-tree.hpp:12:5: note: Member variable 'SegmentTree < Monoids :: MinMonoid < int32_t > >::_monoid' is in the wrong place in the initializer list.
  M _monoid;
    ^
datastructure/segment-tree.hpp:12:5: style:inconclusive: Member variable 'SegmentTree < Monoids :: MinMonoid < int32_t > >::_monoid' is in the wrong place in the initializer list. [initializerList]
  M _monoid;
    ^
datastructure/segment-tree.hpp:26:50: note: Member variable 'SegmentTree < Monoids :: MinMonoid < int32_t > >::_monoid' is in the wrong place in the initializer list.
  explicit SegmentTree(const vec<T> &v) : _n(1), _monoid(M()), e(_monoid.e()) {
                                                 ^
datastructure/segment-tree.hpp:12:5: note: Member variable 'SegmentTree < Monoids :: MinMonoid < int32_t > >::_monoid' is in the wrong place in the initializer list.
  M _monoid;
    ^
datastructure/segment-tree.hpp:48:5: style:inconclusive: Technically the member function 'SegmentTree < Monoids :: MinMonoid < int32_t > >::query' can be const. [functionConst]
  T query(int l, int r) {
    ^
datastructure/segment-tree.hpp:12:5: style:inconclusive: Member variable 'SegmentTree < Monoids :: SumMonoid < long long > >::_monoid' is in the wrong place in the initializer list. [initializerList]
  M _monoid;
    ^
datastructure/segment-tree.hpp:21:40: note: Member variable 'SegmentTree < Monoids :: SumMonoid < long long > >::_monoid' is in the wrong place in the initializer list.
  explicit SegmentTree(int n) : _n(1), _monoid(M()), e(_monoid.e()) {
                                       ^
datastructure/segment-tree.hpp:12:5: note: Member variable 'SegmentTree < Monoids :: SumMonoid < long long > >::_monoid' is in the wrong place in the initializer list.
  M _monoid;
    ^
datastructure/segment-tree.hpp:12:5: style:inconclusive: Member variable 'SegmentTree < Monoids :: SumMonoid < long long > >::_monoid' is in the wrong place in the initializer list. [initializerList]
  M _monoid;
    ^
datastructure/segment-tree.hpp:26:50: note: Member variable 'SegmentTree < Monoids :: SumMonoid < long long > >::_monoid' is in the wrong place in the initializer list.
  explicit SegmentTree(const vec<T> &v) : _n(1), _monoid(M()), e(_monoid.e()) {
                                                 ^
datastructure/segment-tree.hpp:12:5: note: Member variable 'SegmentTree < Monoids :: SumMonoid < long long > >::_monoid' is in the wrong place in the initializer list.
  M _monoid;
    ^
datastructure/segment-tree.hpp:48:5: style:inconclusive: Technically the member function 'SegmentTree < Monoids :: SumMonoid < long long > >::query' can be const. [functionConst]
  T query(int l, int r) {
    ^
datastructure/lazy-segment-tree.hpp:15:12: style:inconclusive: Member variable 'LazySegmentTree < Monofuncs :: RangeSetMonofunc < Monoids :: MinMonoid < int32_t > > >::e' is in the wrong place in the initializer list. [initializerList]
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:49:39: note: Member variable 'LazySegmentTree < Monofuncs :: RangeSetMonofunc < Monoids :: MinMonoid < int32_t > > >::e' is in the wrong place in the initializer list.
      : _monoid(M()), _monofunc(F()), e(_monoid.e()), id(_monofunc.id()) {
                                      ^
datastructure/lazy-segment-tree.hpp:15:12: note: Member variable 'LazySegmentTree < Monofuncs :: RangeSetMonofunc < Monoids :: MinMonoid < int32_t > > >::e' is in the wrong place in the initializer list.
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:15:12: style:inconclusive: Member variable 'LazySegmentTree < Monofuncs :: RangeSetMonofunc < Monoids :: MinMonoid < int32_t > > >::e' is in the wrong place in the initializer list. [initializerList]
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:58:39: note: Member variable 'LazySegmentTree < Monofuncs :: RangeSetMonofunc < Monoids :: MinMonoid < int32_t > > >::e' is in the wrong place in the initializer list.
      : _monoid(M()), _monofunc(F()), e(_monoid.e()), id(_monofunc.id()) {
                                      ^
datastructure/lazy-segment-tree.hpp:15:12: note: Member variable 'LazySegmentTree < Monofuncs :: RangeSetMonofunc < Monoids :: MinMonoid < int32_t > > >::e' is in the wrong place in the initializer list.
  const MT e;
           ^
datastructure/monoid/monofuncs.hpp:30:13: performance:inconclusive: Function parameter 'before' should be passed by const reference. [passedByValue]
  T merge(T before, T after) const override { return before * after; }
            ^
datastructure/monoid/monofuncs.hpp:30:23: performance:inconclusive: Function parameter 'after' should be passed by const reference. [passedByValue]
  T merge(T before, T after) const override { return before * after; }
                      ^
graph/depth.hpp:12:32: style: Parameter 'graph' can be declared with const [constParameter]
vec<TreeNodeInfo> depth(Graph &graph, int root = 0) {
                               ^
math/prime.hpp:18:15: style: The scope of the variable 't' can be reduced. [variableScope]
    long long t, x = powm(a, d, N);
              ^
math/modint.hpp:151:27: style:inconclusive: Technically the member function 'modint < MOD >::operator++' can be const. [functionConst]
  constexpr inline modint operator++(int32_t) noexcept {
                          ^
math/modint.hpp:156:27: style:inconclusive: Technically the member function 'modint < MOD >::operator--' can be const. [functionConst]
  constexpr inline modint operator--(int32_t) noexcept {
                          ^
math/modint.hpp:151:27: style:inconclusive: Technically the member function 'modint < 998244353 >::operator++' can be const. [functionConst]
  constexpr inline modint operator++(int32_t) noexcept {
                          ^
math/modint.hpp:156:27: style:inconclusive: Technically the member function 'modint < 998244353 >::operator--' can be const. [functionConst]
  constexpr inline modint operator--(int32_t) noexcept {
                          ^
math/modint.hpp:132:20: style: Struct 'modint < MOD >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  constexpr inline modint(int val) noexcept
                   ^
math/modint.hpp:132:20: style: Struct 'modint < 998244353 >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  constexpr inline modint(int val) noexcept
                   ^
datastructure/lazy-segment-tree.hpp:15:12: style:inconclusive: Member variable 'LazySegmentTree < Monofuncs :: RangeAffineMonofunc < Monoids :: SumMonoid < modint < 998244353 > > > >::e' is in the wrong place in the initializer list. [initializerList]
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:49:39: note: Member variable 'LazySegmentTree < Monofuncs :: RangeAffineMonofunc < Monoids :: SumMonoid < modint < 998244353 > > > >::e' is in the wrong place in the initializer list.
      : _monoid(M()), _monofunc(F()), e(_monoid.e()), id(_monofunc.id()) {
                                      ^
datastructure/lazy-segment-tree.hpp:15:12: note: Member variable 'LazySegmentTree < Monofuncs :: RangeAffineMonofunc < Monoids :: SumMonoid < modint < 998244353 > > > >::e' is in the wrong place in the initializer list.
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:15:12: style:inconclusive: Member variable 'LazySegmentTree < Monofuncs :: RangeAffineMonofunc < Monoids :: SumMonoid < modint < 998244353 > > > >::e' is in the wrong place in the initializer list. [initializerList]
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:58:39: note: Member variable 'LazySegmentTree < Monofuncs :: RangeAffineMonofunc < Monoids :: SumMonoid < modint < 998244353 > > > >::e' is in the wrong place in the initializer list.
      : _monoid(M()), _monofunc(F()), e(_monoid.e()), id(_monofunc.id()) {
                                      ^
datastructure/lazy-segment-tree.hpp:15:12: note: Member variable 'LazySegmentTree < Monofuncs :: RangeAffineMonofunc < Monoids :: SumMonoid < modint < 998244353 > > > >::e' is in the wrong place in the initializer list.
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:15:12: style:inconclusive: Member variable 'LazySegmentTree < F >::e' is in the wrong place in the initializer list. [initializerList]
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:49:39: note: Member variable 'LazySegmentTree < F >::e' is in the wrong place in the initializer list.
      : _monoid(M()), _monofunc(F()), e(_monoid.e()), id(_monofunc.id()) {
                                      ^
datastructure/lazy-segment-tree.hpp:15:12: note: Member variable 'LazySegmentTree < F >::e' is in the wrong place in the initializer list.
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:15:12: style:inconclusive: Member variable 'LazySegmentTree < F >::e' is in the wrong place in the initializer list. [initializerList]
  const MT e;
           ^
datastructure/lazy-segment-tree.hpp:58:39: note: Member variable 'LazySegmentTree < F >::e' is in the wrong place in the initializer list.
      : _monoid(M()), _monofunc(F()), e(_monoid.e()), id(_monofunc.id()) {
                                      ^
datastructure/lazy-segment-tree.hpp:15:12: note: Member variable 'LazySegmentTree < F >::e' is in the wrong place in the initializer list.
  const MT e;
           ^
datastructure/segment-tree.hpp:12:5: style:inconclusive: Member variable 'SegmentTree < Monoids :: MinMonoid < long long > >::_monoid' is in the wrong place in the initializer list. [initializerList]
  M _monoid;
    ^
datastructure/segment-tree.hpp:21:40: note: Member variable 'SegmentTree < Monoids :: MinMonoid < long long > >::_monoid' is in the wrong place in the initializer list.
  explicit SegmentTree(int n) : _n(1), _monoid(M()), e(_monoid.e()) {
                                       ^
datastructure/segment-tree.hpp:12:5: note: Member variable 'SegmentTree < Monoids :: MinMonoid < long long > >::_monoid' is in the wrong place in the initializer list.
  M _monoid;
    ^
datastructure/segment-tree.hpp:12:5: style:inconclusive: Member variable 'SegmentTree < Monoids :: MinMonoid < long long > >::_monoid' is in the wrong place in the initializer list. [initializerList]
  M _monoid;
    ^
datastructure/segment-tree.hpp:26:50: note: Member variable 'SegmentTree < Monoids :: MinMonoid < long long > >::_monoid' is in the wrong place in the initializer list.
  explicit SegmentTree(const vec<T> &v) : _n(1), _monoid(M()), e(_monoid.e()) {
                                                 ^
datastructure/segment-tree.hpp:12:5: note: Member variable 'SegmentTree < Monoids :: MinMonoid < long long > >::_monoid' is in the wrong place in the initializer list.
  M _monoid;
    ^
datastructure/segment-tree.hpp:48:5: style:inconclusive: Technically the member function 'SegmentTree < Monoids :: MinMonoid < long long > >::query' can be const. [functionConst]
  T query(int l, int r) {
    ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

