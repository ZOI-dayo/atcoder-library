test/aoj/ALDS1_14_B__rolling_hash.test.cpp:11:10: style: Variable 'h' is assigned a value that is never used. [unreadVariable]
  auto h = RollingHash("abc");
         ^
test/aoj/ALDS1_14_B__rolling_hash.test.cpp:12:11: style: Variable 'h2' is assigned a value that is never used. [unreadVariable]
  auto h2 = RollingHash("b");
          ^
math/modint.hpp:56:25: style:inconclusive: Technically the member function 'dynamic_modint::operator--' can be const. [functionConst]
  inline dynamic_modint operator--(int32_t) {
                        ^
math/modint.hpp:73:15: style:inconclusive: Technically the member function 'dynamic_modint::operator==' can be const. [functionConst]
  inline bool operator==(const dynamic_modint &a) { return _val == a._val; }
              ^
math/modint.hpp:74:15: style:inconclusive: Technically the member function 'dynamic_modint::operator!=' can be const. [functionConst]
  inline bool operator!=(const dynamic_modint &a) { return _val != a._val; }
              ^
math/modint.hpp:149:27: style:inconclusive: Technically the member function 'modint < 1000000007 >::operator++' can be const. [functionConst]
  constexpr inline modint operator++(int32_t) noexcept {
                          ^
math/modint.hpp:154:27: style:inconclusive: Technically the member function 'modint < 1000000007 >::operator--' can be const. [functionConst]
  constexpr inline modint operator--(int32_t) noexcept {
                          ^
math/modint.hpp:33:3: style: Struct 'dynamic_modint' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  dynamic_modint(int val) : _val(modint_utils::normalize(val, MOD)) {}
  ^
math/modint.hpp:132:20: style: Struct 'modint < 1000000007 >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  constexpr inline modint(int val) noexcept
                   ^
datastructure/rbst.hpp:36:17: performance:inconclusive: Technically the member function 'RBST < int32_t >::size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  inline size_t size(const node_t* const t) const {
                ^
datastructure/rbst.hpp:28:5: style: Struct 'node_t' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    node_t(T val): val(val), size(1), sum(val), lch(nullptr), rch(nullptr) {}
    ^
datastructure/rbst.hpp:88:14: style: Unsigned expression 'k' can't be negative so it is unnecessary to test it. [unsignedPositive]
    assert(0 <= k);
             ^
datastructure/rbst.hpp:99:14: style: Unsigned expression 'k' can't be negative so it is unnecessary to test it. [unsignedPositive]
    assert(0 <= k);
             ^
graph/depth.hpp:12:32: style: Parameter 'graph' can be declared with const [constParameter]
vec<TreeNodeInfo> depth(Graph &graph, int root = 0) {
                               ^
math/prime.hpp:18:15: style: The scope of the variable 't' can be reduced. [variableScope]
    long long t, x = powm(a, d, N);
              ^
math/modint.hpp:149:27: style:inconclusive: Technically the member function 'modint < MOD >::operator++' can be const. [functionConst]
  constexpr inline modint operator++(int32_t) noexcept {
                          ^
math/modint.hpp:154:27: style:inconclusive: Technically the member function 'modint < MOD >::operator--' can be const. [functionConst]
  constexpr inline modint operator--(int32_t) noexcept {
                          ^
math/modint.hpp:149:27: style:inconclusive: Technically the member function 'modint < 998244353 >::operator++' can be const. [functionConst]
  constexpr inline modint operator++(int32_t) noexcept {
                          ^
math/modint.hpp:154:27: style:inconclusive: Technically the member function 'modint < 998244353 >::operator--' can be const. [functionConst]
  constexpr inline modint operator--(int32_t) noexcept {
                          ^
math/modint.hpp:132:20: style: Struct 'modint < MOD >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  constexpr inline modint(int val) noexcept
                   ^
math/modint.hpp:132:20: style: Struct 'modint < 998244353 >' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  constexpr inline modint(int val) noexcept
                   ^
datastructure/dynamic-segment-tree.hpp:80:44: warning: Struct 'DynamicSegmentTree < long long >' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
      : e(e), op(op), n(bit_ceil(length)), root(new Node(e, e, 0, n)) {}
                                           ^
datastructure/dynamic-segment-tree.hpp:80:44: warning: Struct 'DynamicSegmentTree < long long >' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
      : e(e), op(op), n(bit_ceil(length)), root(new Node(e, e, 0, n)) {}
                                           ^
datastructure/dynamic-segment-tree.hpp:69:9: style: Class 'DynamicSegmentTree < long long >' is unsafe, 'DynamicSegmentTree < long long >::root' can leak by wrong usage. [unsafeClassCanLeak]
  Node *root;
        ^
datastructure/dynamic-segment-tree.hpp:31:15: style: Class 'Node' is unsafe, 'Node::l_child' can leak by wrong usage. [unsafeClassCanLeak]
    Node *p, *l_child, *r_child;
              ^
datastructure/dynamic-segment-tree.hpp:31:25: style: Class 'Node' is unsafe, 'Node::r_child' can leak by wrong usage. [unsafeClassCanLeak]
    Node *p, *l_child, *r_child;
                        ^
datastructure/dynamic-segment-tree.hpp:62:23: style: Parameter 'op' can be declared with const [constParameter]
    void update(auto &op) {
                      ^
datastructure/rbst.hpp:36:17: performance:inconclusive: Technically the member function 'RBST < long long >::size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
  inline size_t size(const node_t* const t) const {
                ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

