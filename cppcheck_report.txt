2d/point.hpp:7:3: warning:inconclusive: Member variable 'Point::x' is not initialized in the constructor. [uninitMemberVar]
  Point() {}
  ^
2d/point.hpp:7:3: warning:inconclusive: Member variable 'Point::y' is not initialized in the constructor. [uninitMemberVar]
  Point() {}
  ^
datastructure/comp.hpp:10:7: style:inconclusive: Member variable 'comp < long long >::_cmp_n' is in the wrong place in the initializer list. [initializerList]
  int _cmp_n;
      ^
datastructure/comp.hpp:15:50: note: Member variable 'comp < long long >::_cmp_n' is in the wrong place in the initializer list.
      : _n(src.size()), _raw(src), _comp(_n, 0), _cmp_n(0) {
                                                 ^
datastructure/comp.hpp:10:7: note: Member variable 'comp < long long >::_cmp_n' is in the wrong place in the initializer list.
  int _cmp_n;
      ^
math/modint.hpp:39:10: style:inconclusive: Technically the member function 'modint::operator--' can be const. [functionConst]
  modint operator--(int32_t) {
         ^
math/modint.hpp:48:8: style:inconclusive: Technically the member function 'modint::operator==' can be const. [functionConst]
  bool operator==(const modint &a) { return _val == a._val; }
       ^
math/modint.hpp:49:8: style:inconclusive: Technically the member function 'modint::operator!=' can be const. [functionConst]
  bool operator!=(const modint &a) { return _val != a._val; }
       ^
math/modint.hpp:127:30: style:inconclusive: Technically the member function 'modint998::operator++' can be const. [functionConst]
  constexpr inline modint998 operator++(int32_t) noexcept {
                             ^
math/modint.hpp:132:30: style:inconclusive: Technically the member function 'modint998::operator--' can be const. [functionConst]
  constexpr inline modint998 operator--(int32_t) noexcept {
                             ^
math/modint.hpp:141:25: style:inconclusive: Technically the member function 'modint998::operator==' can be const. [functionConst]
  constexpr inline bool operator==(const modint998 &a) noexcept { return _val == a._val; }
                        ^
math/modint.hpp:142:25: style:inconclusive: Technically the member function 'modint998::operator!=' can be const. [functionConst]
  constexpr inline bool operator!=(const modint998 &a) noexcept { return _val != a._val; }
                        ^
convolution/convolution.hpp:32:8: style:inconclusive: Technically the member function 'Convolution::ntt' can be const. [functionConst]
  void ntt(vec<mint> &A) {
       ^
convolution/convolution.hpp:51:8: style:inconclusive: Technically the member function 'Convolution::inv_ntt' can be const. [functionConst]
  void inv_ntt(vec<mint> &A) {
       ^
math/modint.hpp:12:3: style: Struct 'modint' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  modint(int val) : _val(val) { normalize(); }
  ^
math/modint.hpp:111:47: style: The scope of the variable 't' can be reduced. [variableScope]
    uint32_t a = _val, b = MOD, u = 1, v = 0, t;
                                              ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

