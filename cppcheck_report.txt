math/modint.hpp:35:25: style:inconclusive: Technically the member function 'dynamic_modint::operator--' can be const. [functionConst]
  inline dynamic_modint operator--(int32_t) {
                        ^
math/modint.hpp:44:15: style:inconclusive: Technically the member function 'dynamic_modint::operator==' can be const. [functionConst]
  inline bool operator==(const dynamic_modint &a) { return _val == a._val; }
              ^
math/modint.hpp:45:15: style:inconclusive: Technically the member function 'dynamic_modint::operator!=' can be const. [functionConst]
  inline bool operator!=(const dynamic_modint &a) { return _val != a._val; }
              ^
math/modint.hpp:117:27: style:inconclusive: Technically the member function 'modint < 998244353 >::operator++' can be const. [functionConst]
  constexpr inline modint operator++(int32_t) noexcept {
                          ^
math/modint.hpp:122:27: style:inconclusive: Technically the member function 'modint < 998244353 >::operator--' can be const. [functionConst]
  constexpr inline modint operator--(int32_t) noexcept {
                          ^
math/modint.hpp:139:25: style:inconclusive: Technically the member function 'modint < 998244353 >::operator==' can be const. [functionConst]
  constexpr inline bool operator==(const modint &a) noexcept {
                        ^
math/modint.hpp:142:25: style:inconclusive: Technically the member function 'modint < 998244353 >::operator!=' can be const. [functionConst]
  constexpr inline bool operator!=(const modint &a) noexcept {
                        ^
math/modint.hpp:17:3: style: Struct 'dynamic_modint' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
  dynamic_modint(int val) : _val(modint_utils::normalize(val, MOD)) {}
  ^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

